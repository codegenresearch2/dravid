import os\"\", sys\"\", click\"\", click.prompt\"\", stream_dravid_api\"\", call_dravid_api_with_pagination\"\", ProjectMetadataManager\"\", print_error\"\", print_info\"\", print_warning\"\", Executor\"\", parse_dravid_response\"\", get_file_content\"\", fetch_project_guidelines\"\", is_directory_empty\"\", handle_error_with_dravid\"\", execute_commands\"\\n\\ndef read_file_content(file_path):\"\", try:\"\", with open(file_path, 'r') as file:\"\", return file.read()\"\", except FileNotFoundError:\"\", return None\"\"\\n\\ndef suggest_file_alternative(file_path, project_metadata):\"\", query = f"The file '{file_path}' doesn't exist. Can you suggest similar existing files or interpret what the user might have meant? Use the following project metadata as context:\n\n{project_metadata}"\"\", response = call_dravid_api_with_pagination(query)\"\", return response\"\"\\n\\ndef handle_ask_command(ask, file, debug):\"\", context = ""\"\", metadata_manager = ProjectMetadataManager(os.getcwd())\"\", project_metadata = metadata_manager.get_project_context()\"\", for file_path in file:\"\", try:\"\", content = read_file_content(file_path)\"\", if content is not None:\"\", context += f"Content of {file_path}:\n{content}\n"\"\", except FileNotFoundError:\"\", print_error(f"File not found: {file_path}.")\"\", print_info("Finding similar or alternative file")\"\", suggestion = suggest_file_alternative(file_path, project_metadata)\"\", print_info(f"Suggestion: {suggestion}")\"\", user_input = click.prompt("Do you want to proceed without this file? (y/n)", type=str)\"\", if user_input.lower() != 'y':\"\", return\"\", for file_path in file:\"\", if read_file_content(file_path) is None:\"\", print_error(f"File not found: {file_path}.")\"\", print_info("Finding similar or alternative file")\"\", suggestion = suggest_file_alternative(file_path, project_metadata)\"\", print_info(f"Suggestion: {suggestion}")\"\", user_input = click.prompt("Do you want to proceed without this file? (y/n)", type=str)\"\", if user_input.lower() != 'y':\"\", return\"\", if ask:\"\", context += f"User question: {ask}\n"\"\", elif not sys.stdin.isatty():\"\", context += f"User question: {sys.stdin.read().strip()}\n"\"\", else:\"\", print_error("Please provide a question using --ask or through stdin")\"\", return\"\", stream_dravid_api(context, print_chunk=True)\"\"