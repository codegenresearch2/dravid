import traceback\nfrom ...api.main import call_dravid_api\nfrom ...utils.step_executor import Executor\nfrom ...utils.utils import print_error, print_success, print_info, print_command_details\nfrom ...utils.loader import run_with_loader\nfrom ...prompts.monitor_error_resolution import get_error_resolution_prompt\nfrom ..query.file_operations import get_files_to_modify\nfrom ...utils.file_utils import get_file_content\n\n\ndef monitoring_handle_error_with_dravid(error, line, monitor):\n    print_error(f"Error detected: {error}")\n\n    error_message = str(error)\n    error_type = type(error).__name__\n    error_trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))\n\n    project_context = monitor.metadata_manager.get_project_context()\n\n    print_info("Identifying relevant files for error context...")\n    error_details = f"error_msg: {error_message}, error_type: {error_type}, error_trace: {error_trace}"\n    files_to_check = run_with_loader(\n        lambda: get_files_to_modify(error_details, project_context),\n        "Analyzing project files"\n    )\n\n    print_info(f"Found {len(files_to_check)} potentially relevant files.")\n\n    file_contents = {}\n    for file in files_to_check:\n        content = get_file_content(file)\n        if content:\n            file_contents[file] = content\n            print_info(f"  - Read content of {file}")\n\n    file_context = "\n".join([f"Content of {file}:\n{content}" for file, content in file_contents.items()])