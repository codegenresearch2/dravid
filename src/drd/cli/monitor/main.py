import re\nimport os\nfrom .server_monitor import DevServerMonitor\nfrom .error_resolver import monitoring_handle_error_with_dravid\nfrom ...utils import print_info\n\n\ndef run_dev_server_with_monitoring(command: str):\n    print_info('Starting server monitor.')\n    error_handlers = {\n        r"(?:Cannot find module|Module not found|ImportError|No module named)": handle_module_not_found,\n        r"(?:SyntaxError|Expected|Unexpected token)": handle_syntax_error,\n        r"(?:Error:|Failed to compile)": handle_general_error,\n    }\n    current_dir = os.getcwd()\n    monitor = DevServerMonitor(current_dir, error_handlers, command)\n    try:\n        monitor.start()\n        print_info('Server monitor started. Press Ctrl+C to stop.')\n        while not monitor.should_stop.is_set():\n            pass\n        print_info('Server monitor has ended.')\n    except KeyboardInterrupt:\n        print_info('Stopping server...')\n    finally:\n        monitor.stop()\n\n\ndef handle_module_not_found(error_msg, monitor):\n    match = re.search(r"(?:Cannot find module|Module not found|ImportError|No module named).*['"](.*?)['"]", error_msg, re.IGNORECASE)\n    if match:\n        module_name = match.group(1)\n        error = ImportError(f"Module '{module_name}' not found")\n        monitoring_handle_error_with_dravid(error, error_msg, monitor)\n\n\ndef handle_syntax_error(error_msg, monitor):\n    error = SyntaxError(f"Syntax error detected: {error_msg}")\n    monitoring_handle_error_with_dravid(error, error_msg, monitor)\n\n\ndef handle_general_error(error_msg, monitor):\n    error = Exception(f"General error detected: {error_msg}")\n    monitoring_handle_error_with_dravid(error, error_msg, monitor)\n