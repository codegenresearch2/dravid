import re\nimport threading\nimport time\nimport select\nfrom ...utils import print_info, print_error\n\nMAX_RETRIES = 3\n\n\nclass OutputMonitor:\n    def __init__(self, monitor):\n        self.monitor = monitor\n        self.thread = None\n        self.last_output_time = None\n        self.idle_prompt_shown = False\n        self.retry_count = 0\n\n    def start(self):\n        self.thread = threading.Thread(target=self._monitor_output, daemon=True)\n        self.thread.start()\n\n    def _check_for_errors(self, line, error_buffer):\n        for error_pattern, handler in self.monitor.error_handlers.items():\n            if re.search(error_pattern, line, re.IGNORECASE):\n                full_error = ''.join(error_buffer)\n                handler(full_error, self.monitor)\n                error_buffer.clear()\n                break\n\n    def _monitor_output(self):\n        error_buffer = []\n        iteration = 0\n        self.last_output_time = time.time()\n        while not self.monitor.should_stop.is_set():\n            iteration += 1\n\n            if self.monitor.process.poll() is not None and not self.monitor.processing_input.is_set():\n                if not self.monitor.restart_requested.is_set():\n                    print_info("Server process ended unexpectedly.")\n                    if self.retry_count < MAX_RETRIES:\n                        print_info(\n                            f"Restarting... (Attempt {self.retry_count + 1}/{MAX_RETRIES})\