import traceback\\\\\nimport click\\\\\nfrom ...api.main import call_dravid_api\\\\\nfrom ...utils import print_error, print_success, print_info, print_step, print_debug\\\\\nfrom ...metadata.common_utils import generate_file_description\\\\\nfrom ...prompts.error_resolution_prompt import get_error_resolution_prompt\\\\\n\\\\n\\\\ndef execute_commands(commands, executor, metadata_manager, is_fix=False, debug=False):\\\\\\\\n    all_outputs = []\\\\\\\n    total_steps = len(commands)\\\\\\\n\\\\n    for i, cmd in enumerate(commands, 1):\\\\\\\n        step_description = 'fix' if is_fix else 'command'\\\\\\\n        print_step(i, total_steps, f"Processing {cmd['type']} {step_description}...") \\\\\\\n\\\\n        if cmd['type'] == 'explanation':\\\\\\\n            print_info(f'Explanation: {cmd['content']}') \\\\\\\n            all_outputs.append(f'Step {i}/{total_steps}: Explanation - {cmd['content']}') \\\\\\\n            continue\\\\\\\n\\\\n        try:\\\\\\\n            if cmd['type'] == 'shell':\\\\\\\n                output = handle_shell_command(cmd, executor)\\\\\\\n                all_outputs.append(f'Step {i}/{total_steps}: Shell command - {cmd['command']}\nOutput: {output}') \\\\\\\n            elif cmd['type'] == 'file':\\\\\\\n                output = handle_file_operation(cmd, executor, metadata_manager)\\\\\\\n                all_outputs.append(f'Step {i}/{total_steps}: File operation - {cmd['operation']} - {cmd['filename']} - {output}') \\\\\\\n            elif cmd['type'] == 'metadata':\\\\\\\n                output = handle_metadata_operation(cmd, metadata_manager)\\\\\\\n                all_outputs.append(f'Step {i}/{total_steps}: Metadata operation - {cmd['operation']} - {output}') \\\\\\\n\\\\n            if debug:\\\\\\\n                print_debug(f'Completed step {i}/{total_steps}') \\\\\\\n\\\\n        except Exception as e:\\\\\\\n            error_message = f'Step {i}/{total_steps}: Error executing {step_description}: {cmd}\nError details: {str(e)}'\\\\\\\n            print_error(error_message) \\\\\\\n            all_outputs.append(error_message) \\\\\\\n            return False, i, str(e), '\n'.join(all_outputs) \\\\\\\n\\\\n    return True, total_steps, None, '\n'.join(all_outputs) \\\\\\\n\\\\n\\\\ndef handle_shell_command(cmd, executor):\\\\\\\n    print_info(f'Executing shell command: {cmd['command']}') \\\\\\\n    output = executor.execute_shell_command(cmd['command'])\\\\\\\n    if output is None:\\\\\\\n        raise Exception(f'Command failed: {cmd['command']}') \\\\\\\n    print_success(f'Successfully executed: {cmd['command']}') \\\\\\\n    if output:\\\\\\\n        click.echo(f'Command output:\n{output}') \\\\\\\n    return output\\\\\\\n\\\\n\\\\ndef handle_file_operation(cmd, executor, metadata_manager):\\\\\\\n    print_info(f'Performing file operation: {cmd['operation']} on {cmd['filename']}') \\\\\\\n    operation_performed = executor.perform_file_operation(\\\\\\\n        cmd['operation'],\\\\\\\n        cmd['filename'],\\\\\\\n        cmd.get('content', None),\\\\\\\n        force=True\\\\\\\n    )\\\\\\\n    if operation_performed:\\\\\\\n        print_success(f'Successfully performed {cmd['operation']} on file: {cmd['filename']}') \\\\\\\n        if cmd['operation'] in ['CREATE', 'UPDATE']:\\\\\\\n            update_file_metadata(cmd, metadata_manager, executor)\\\\\\\n        return 'Success'\\\\\\\n    else:\\\\\\\n        raise Exception(f'File operation failed: {cmd['operation']} on {cmd['filename']}') \\\\\\\n\\\\n\\\\ndef handle_metadata_operation(cmd, metadata_manager):\\\\\\\n    if cmd['operation'] == 'UPDATE_FILE':\\\\\\\n        if metadata_manager.update_metadata_from_file(cmd['filename']):\\\\\\\n            print_success(f'Updated metadata for file: {cmd['filename']}') \\\\\\\n            return f'Updated metadata for {cmd['filename']}'\\\\\\\n        else:\\\\\\\n            raise Exception(f'Failed to update metadata for file: {cmd['filename']}') \\\\\\\n    else:\\\\\\\n        raise Exception(f'Unknown operation: {cmd['operation']}') \\\\\\\n\\\\n\\\\ndef update_file_metadata(cmd, metadata_manager, executor):\\\\\\\n    project_context = metadata_manager.get_project_context()\\\\\\\n    folder_structure = executor.get_folder_structure()\\\\\\\n    file_type, description, exports = generate_file_description(\\\\\\\n        cmd['filename'],\\\\\\\n        cmd.get('content', ''),\\\\\\\n        project_context,\\\\\\\n        folder_structure\\\\\\\n    )\\\\\\\n    metadata_manager.update_file_metadata(\\\\\\\n        cmd['filename'],\\\\\\\n        file_type,\\\\\\\n        cmd.get('content', ''),\\\\\\\n        description,\\\\\\\n        exports\\\\\\\n    )