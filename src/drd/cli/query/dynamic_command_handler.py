import traceback\\\\\nimport click\\\\\nfrom ...api.main import call_dravid_api\\\\\nfrom ...utils import print_error, print_success, print_info, print_step, print_debug\\\\\nfrom ...metadata.common_utils import generate_file_description\\\\\nfrom ...prompts.error_resolution_prompt import get_error_resolution_prompt\\\\\n\\\\\ndef execute_commands(commands, executor, metadata_manager, is_fix=False, debug=False):\\\\\n    all_outputs = []\\\\\\n    total_steps = len(commands)\\\\\\\\\n\\\\\\\n    for i, cmd in enumerate(commands, 1):\\\\\\\\n        step_description = 'fix' if is_fix else 'command'\\\\\\\\n        print_step(i, total_steps,\\\\\\\\\\\n                   f'Processing {cmd['type']} {step_description}...')\\\\\\\\\\\n\\\\\\\n        if cmd['type'] == 'explanation':\\\\\\\\n            print_info(f'Explanation: {cmd['content']}')\\\\\\\\\\\n            all_outputs.append(\\\\\\\\\\\n                f'Step {i}/{total_steps}: Explanation - {cmd['content']}')\\\\\\\\\\\n        else:\\\\\\\\n            try:\\\\\\\\n                if cmd['type'] == 'shell':\\\\\\\\n                    output = handle_shell_command(cmd, executor)\\\\\\\\\\\n                elif cmd['type'] == 'file':\\\\\\\\n                    output = handle_file_operation(cmd, executor, metadata_manager)\\\\\\\\\\\n                elif cmd['type'] == 'metadata':\\\\\\\\n                    output = handle_metadata_operation(cmd, metadata_manager)\\\\\\\\\\\n\\\\\\\n                if isinstance(output, str) and output.startswith('Skipping'):\\\\\\\\n                    print_info(f'Step {i}/{total_steps}: {output}')\\\\\\\\\\\n                    all_outputs.append(f'Step {i}/{total_steps}: {output}')\\\\\\\\\\\n                else:\\\\\\\\n                    all_outputs.append(\\\\\\\\\\\n                        f'Step {i}/{total_steps}: {cmd['type'].capitalize()} command - {cmd.get('command', '')} {cmd.get('operation', '')}\nOutput: {output}')\\\\\\\\\\\n\\\\\\\n            except Exception as e:\\\\\\\\n                error_message = f'Step {i}/{total_steps}: Error executing {step_description}: {cmd}\nError details: {str(e)}'\\\\\\\\n                print_error(error_message)\\\\\\\\\\\n                all_outputs.append(error_message)\\\\\\\\\\\n                return False, i, str(e), '\n'.join(all_outputs)\\\\\\\\\\\n\\\\\\\n            if debug:\\\\\\\\n                print_debug(f'Completed step {i}/{total_steps}')\\\\\\\\\\\n\\\\\\\n    return True, total_steps, None, '\n'.join(all_outputs)