import click\\nfrom ...api.main import stream_dravid_api, call_dravid_vision_api\\nfrom ...utils.step_executor import Executor\\nfrom ...metadata.project_metadata import ProjectMetadataManager\\nfrom .dynamic_command_handler import handle_error_with_dravid, execute_commands\\nfrom ...utils import print_error, print_success, print_info, print_debug, print_warning, print_step, print_header, run_with_loader\\nfrom ...utils.file_utils import get_file_content, fetch_project_guidelines, is_directory_empty\\nfrom .file_operations import get_files_to_modify\\nfrom ...utils.parser import parse_dravid_response\\n\\n\\ndef execute_dravid_command(query, image_path, debug, instruction_prompt, warn=None, reference_files=None):\\n    print_header(\\"Starting Dravid AI...\\")\\n\\n    if warn:\\n        print_warning(\\"Please ensure you review and commit(git) changes\\")\\n        print(\\"\\n\\")\\n\\n    executor = Executor()\\n\\n    metadata_manager = ProjectMetadataManager(executor.current_dir)\\n\\n    try:\\n        project_context = metadata_manager.get_project_context()\\n\\n        files_info = None\\n        if project_context:\\n            print_info(\\"üîç Identifying related files to the query...\\", indent=2)\\n            print_info(\\"(1 LLM call)\\", indent=4)\\n            files_info = run_with_loader(\\n                lambda: get_files_to_modify(query, project_context),\\n                \\\"Analyzing project files\\"\\n            )\\n\\n            if debug:\\n                print_info(\\"Files and dependencies analysis:\\", indent=4)\\n                if files_info['main_file']:\\n                    print_info(\\n                    f\\"Main file to modify: {files_info['main_file']}\\", indent=6\\n                )\\n                print_info(\\"Dependencies:\\", indent=6\\n                for dep in files_info['dependencies']:\\n                    print_info(f\\"- {dep['file']}\\", indent=8\\n                    for imp in dep['imports']:\\n                        print_info(f\\"  Imports: {imp}\\", indent=10\\n                print_info(\\"New files to create:\\", indent=6\\n                for new_file in files_info['new_files']:\\n                    print_info(f\\"- {new_file['file']}\\", indent=8\\n                print_info(\\"File contents to load:\\", indent=6\\n                for file in files_info['file_contents_to_load']:\\n                    print_info(f\\"- {file}\\", indent=8\\n\\n        full_query = construct_full_query(\\n            query, executor, project_context, files_info, reference_files\\n        )\\n        print(full_query, \\\"full query\\")\\n\\n        print_info(\\"üí° Preparing to send query to LLM...\\", indent=2)\\n        if image_path:\\n            print_info(f\\"Processing image: {image_path}\\", indent=4)\\n            print_info(\\"(1 LLM call)\\", indent=4)\\n            commands = run_with_loader(\\n                lambda: call_dravid_vision_api(\\n                    full_query, image_path, include_context=True, instruction_prompt=instruction_prompt\\n                ),\\n                \\\"Analyzing image and generating response\\"\\n            )\\n        else:\\n            print_info(\\"üí¨ Streaming response from LLM...\\", indent=2)\\n            print_info(\\"(1 LLM call)\\", indent=4)\\n            xml_result = stream_dravid_api(\\n                full_query, include_context=True, instruction_prompt=instruction_prompt, print_chunk=False\\n            )\\n            commands = parse_dravid_response(xml_result)\\n            if debug:\\n                print_debug(f\\"Received {len(commands)} new command(s)\\")\\n\\n        if not commands:\\n            print_error(\\n                \\\"Failed to parse LLM's response or no commands to execute.\\\