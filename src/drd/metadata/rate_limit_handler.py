import asyncio\"nimport sys\"nimport time\"nfrom ..api.main import call_dravid_api_with_pagination\"nfrom ..utils.parser import extract_and_parse_xml\"nfrom ..prompts.file_metada_desc_prompts import get_file_metadata_prompt\"nfrom ..utils.utils import print_info, print_error, print_success, print_warning\"n\"nMAX_CONCURRENT_REQUESTS = 10\"nMAX_CALLS_PER_MINUTE = 100\"nRATE_LIMIT_PERIOD = 60 # seconds\"n\"nclass RateLimiter:\"n    def __init__(self, max_calls, period):\"n        self.max_calls = max_calls\"n        self.period = period\"n        self.calls = asyncio.Queue(maxsize=max_calls)\"n        self.semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)\"n\"n    async def acquire(self):\"n        while True:\"n            if self.calls.full():\"n                oldest_call = await self.calls.get()\"n                time_since_oldest_call = time.time() - oldest_call\"n                if time_since_oldest_call < self.period:\"n                    await asyncio.sleep(self.period - time_since_oldest_call)\"n            await self.calls.put(time.time())\"n            return\"n\"nrate_limiter = RateLimiter(MAX_CALLS_PER_MINUTE, RATE_LIMIT_PERIOD)\"n\"ndef to_thread(func, *args, **kwargs):\"n    if sys.version_info >= (3, 9):\"n        return asyncio.to_thread(func, *args, **kwargs)\"n    else:\"n        loop = asyncio.get_event_loop()\"n        return loop.run_in_executor(None, functools.partial(func, *args, **kwargs))\"n\"nasync def process_single_file(filename, content, project_context, folder_structure):\"n    metadata_query = get_file_metadata_prompt(filename, content, project_context, folder_structure)\"n    try:\"n        async with rate_limiter.semaphore:\"n            await rate_limiter.acquire()\"n            response = await to_thread(call_dravid_api_with_pagination, metadata_query, include_context=True)\"n\n        root = extract_and_parse_xml(response)\"n        type_elem = root.find('.//type')\