def test_basic_explanation(capsys):\n    chunks = ['<response>', '<explanation>This is a basic explanation.</explanation>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: This is a basic explanation.' in captured.out\n\n\ndef test_spaced_tags(capsys):\n    chunks = ['< response >', '  < explanation >', 'This is an explanation with spaced tags.', '  < /explanation >', '</ response >']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: This is an explanation with spaced tags.' in captured.out\n\n\ndef test_newline_in_tags(capsys):\n    chunks = ['<response\n>', '<explanation\n>', 'This is an explanation with newlines in tags.', '</explanation\n>', '</response\n>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: This is an explanation with newlines in tags.' in captured.out\n\n\ndef test_mixed_spacing_and_newlines(capsys):\n    chunks = ['< response \n >', '  <\nexplanation \n >', 'This is an explanation with mixed spacing and newlines.', '  < /explanation\n >', '</ response >']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: This is an explanation with mixed spacing and newlines.' in captured.out\n\n\ndef test_multiple_chunks(capsys):\n    chunks = ['< response >', '  < expl', 'anation >', 'This is an explanation ', 'split across multiple chunks.', '  < /explanation >', '</ response >']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: This is an explanation split across multiple chunks.' in captured.out\n\n\ndef test_multiple_explanations(capsys):\n    chunks = ['<response>', '<explanation>First explanation.</explanation>', '<other_tag>Some other content.</other_tag>', '<explanation>Second explanation.</explanation>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: First explanation.' in captured.out\n    assert 'Explanation: Second explanation.' in captured.out\n\n\ndef test_explanation_and_shell_command(capsys):\n    chunks = ['<response >', '  <explanation ', '>A brief explanation of the steps, if necessary</explanation>', '  <steps', '>', '    <step>', '      <type>shell</type>', '      <command>npm run dev</command>', '    </step>', '</steps>', '</response >']\n    print('Debug: Starting test_explanation_and_shell_command')\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    print(f'Debug: Captured output: {captured.out}')\n    assert 'Explanation: A brief explanation of the steps, if necessary' in captured.out\n    assert 'Shell Command: npm run dev' in captured.out\n    print('Debug: test_explanation_and_shell_command completed')\n\n\ndef test_file_operation_and_cdata(capsys):\n    chunks = ['<response >', '<explanation ', '> This is an explanation of file operation.</explanation>', '<steps>', '<step>', '      <type>file</type>', '      <operation>UPDATE</operation>', '      <filename>path/to/existing/file.ext</filename>', '      <content>', '        <![CDATA[', '          <html> <body>This is the content of the file</body> </html>', '        ]]>', '      </content>', '    </step>', '</steps>', '</response>']\n    print('Debug: Starting test_file_operation_and_cdata')\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    print(f'Debug: Captured output: {captured.out}')\n    assert 'Explanation: This is an explanation of file operation.' in captured.out\n    assert 'File Operation: UPDATE path/to/existing/file.ext' in captured.out\n    assert '<html> <body>This is the content of the file</body> </html>' in captured.out\n    print('Debug: test_file_operation_and_cdata completed')\n\n\ndef test_multiple_shell_commands(capsys):\n    chunks = ['<response>', '<explanation>Multiple commands example</explanation>', '<steps>', '<step><type>shell</type><command>npm install</command></step>', '<step><type>shell</type><command>npm run build</command></step>', '<step><type>shell</type><command>npm run start</command></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: Multiple commands example' in captured.out\n    assert 'Shell Command: npm install' in captured.out\n    assert 'Shell Command: npm run build' in captured.out\n    assert 'Shell Command: npm run start' in captured.out\n\n\ndef test_mixed_content(capsys):\n    chunks = ['<response>', '<explanation>Mixed content example</explanation>', '<steps>', '<step><type>file</type><operation>CREATE</operation><filename>example.txt</filename></step>', '<step><type>shell</type><command>echo 'Hello' > example.txt</command></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: Mixed content example' in captured.out\n    assert 'Shell Command: echo 'Hello' > example.txt' in captured.out\n\n\ndef test_multiple_file_operations(capsys):\n    chunks = ['<response>', '<explanation>Multiple file operations</explanation>', '<steps>', '<step><type>file</type><operation>CREATE</operation><filename>file1.txt</filename><content><![CDATA[Content 1]]></content></step>', '<step><type>file</type><operation>UPDATE</operation><filename>file2.txt</filename><content><![CDATA[Content 2]]></content></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: Multiple file operations' in captured.out\n    assert 'File Operation: CREATE file1.txt' in captured.out\n    assert 'File Operation: UPDATE file2.txt' in captured.out\n    assert 'Content 1' in captured.out\n    assert 'Content 2' in captured.out\n\n\ndef test_mixed_operations(capsys):\n    chunks = ['<response>', '<explanation>Mixed operations</explanation>', '<steps>', '<step><type>file</type><operation>CREATE</operation><filename>file.txt</filename><content><![CDATA[File content]]></content></step>', '<step><type>shell</type><command>echo 'Hello'</command></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: Mixed operations' in captured.out\n    assert 'File Operation: CREATE file.txt' in captured.out\n    assert 'File content' in captured.out\n    assert 'Shell Command: echo 'Hello'' in captured.out\n\n\ndef test_cdata_with_xml_content(capsys):\n    chunks = ['<response>', '<explanation>CDATA with XML-like content</explanation>', '<steps>', '<step><type>file</type><operation>CREATE</operation><filename>config.xml</filename>', '<content><![CDATA[', '<config>', '  <setting>value</setting>', '  <nested>', '    <element>text</element>', '  </nested>', '</config>', ']]></content></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Explanation: CDATA with XML-like content' in captured.out\n    assert 'File Operation: CREATE config.xml' in captured.out\n    assert '<config>' in captured.out\n    assert '<setting>value</setting>' in captured.out\n    assert '<nested>' in captured.out\n    assert '<element>text</element>' in captured.out\n    assert '</config>' in captured.out\n\n\ndef test_large_cdata_content(capsys):\n    chunks = ['<response><steps><step><type>file</type><operation>CREATE</operation><filename>large_file.txt</filename><content><![CDATA[', 'This is the start of a large file content.\n', 'This is the middle of the file content.\n' * 100, 'This is the end of the file content.', ']]></content></step></steps></response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'File Operation: CREATE large_file.txt' in captured.out\n    assert 'File Content:' in captured.out\n    assert 'This is the start of a large file content.' in captured.out\n    assert 'This is the middle of the file content.' in captured.out\n    assert 'This is the end of the file content.' in captured.out\n\n\ndef test_split_step(capsys):\n    chunks = ['<response><steps><st', 'ep><type>shell</type><comm', 'and>echo 'Hello'</command></step></steps></response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'Shell Command: echo 'Hello'' in captured.out\n\n\ndef test_split_cdata(capsys):\n    chunks = ['<response><steps><step><type>file</type><operation>CREATE</operation><filename>test.txt</filename><content><![CDATA[This is ', 'a test file ', 'with multiple lines]]></content></step></steps></response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'File Operation: CREATE test.txt' in captured.out\n    assert 'This is a test file with multiple lines' in captured.out\n\n\ndef test_nested_cdata(capsys):\n    chunks = ['<response>', '<steps>', '<step><type>file</type><operation>CREATE</operation><filename>nested_cdata.xml</filename>', '<content><![CDATA[', '<outer>', '  <inner><![CDATA[This is nested CDATA content]]></inner>', '  <another>Regular content</another>', '</outer>', ']]></content></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'File Operation: CREATE nested_cdata.xml' in captured.out\n    assert '<outer>' in captured.out\n    assert '<inner><![CDATA[This is nested CDATA content]]></inner>' in captured.out\n    assert '<another>Regular content</another>' in captured.out\n    assert '</outer>' in captured.out\n\n\ndef test_multiple_nested_cdata(capsys):\n    chunks = ['<response>', '<steps>', '<step><type>file</type><operation>UPDATE</operation><filename>complex_cdata.xml</filename>', '<content><![CDATA[', '<root>', '  <elem1><![CDATA[First nested CDATA]]></elem1>', '  <elem2><![CDATA[Second nested CDATA with ]]> symbol]]></elem2>', '  <elem3>Normal content with <![CDATA[inline CDATA]]></elem3>', '</root>', ']]></content></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'File Operation: UPDATE complex_cdata.xml' in captured.out\n    assert '<root>' in captured.out\n    assert '<elem1><![CDATA[First nested CDATA]]></elem1>' in captured.out\n    assert '<elem2><![CDATA[Second nested CDATA with ]]> symbol]]></elem2>' in captured.out\n    assert '<elem3>Normal content with <![CDATA[inline CDATA]]></elem3>' in captured.out\n    assert '</root>' in captured.out\n\n\ndef test_cdata_with_xml_like_content(capsys):\n    chunks = ['<response>', '<steps>', '<step><type>file</type><operation>CREATE</operation><filename>xml_in_cdata.xml</filename>', '<content><![CDATA[', '<config>', '  <setting key='value'>', '    <![CDATA[This is <not> parsed as XML]]>', '  </setting>', '</config>', ']]></content></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'File Operation: CREATE xml_in_cdata.xml' in captured.out\n    assert '<config>' in captured.out\n    assert '<setting key='value'>' in captured.out\n    assert '<![CDATA[This is <not> parsed as XML]]>' in captured.out\n    assert '</setting>' in captured.out\n    assert '</config>' in captured.out\n\n\ndef test_cdata_with_instruction_like_content(capsys):\n    chunks = ['<response>', '<steps>', '<step><type>file</type><operation>CREATE</operation><filename>xml_in_cdata.xml</filename>', '<content><![CDATA[', '<response >', '<explanation> This is an explanation of file operation.</explanation>', '<steps>', '<step>', '      <type>file</type>', '      <operation>UPDATE</operation>', '      <filename>path/to/existing/file.ext</filename>', '      <content>', '        <![CDATA[', '          <html> <body>This is the content of the file</body> </html>', '        ]]>', '      </content>', '    </step>', '</steps>', '</response>', ']]></content></step>', '</steps>', '</response>']\n    stream_and_print_commands(chunks)\n    captured = capsys.readouterr()\n    assert 'File Operation: CREATE xml_in_cdata.xml' in captured.out\n    assert '<response >' in captured.out\n    assert '<explanation> This is an explanation of file operation.</explanation>' in captured.out\n    assert '<type>file</type>' in captured.out\n    assert '<operation>UPDATE</operation>' in captured.out\n    assert '<filename>path/to/existing/file.ext</filename>' in captured.out\n    assert '<![CDATA[' in captured.out\n    assert '<html> <body>This is the content of the file</body> </html>' in captured.out\n    assert ']]>' in captured.out\n    assert '</response>' in captured.out\n