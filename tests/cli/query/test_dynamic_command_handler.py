import unittest\nfrom unittest.mock import patch, MagicMock, call\nimport xml.etree.ElementTree as ET\nfrom drd.cli.query.dynamic_command_handler import (\n    execute_commands,\n    handle_shell_command,\n    handle_file_operation,\n    handle_metadata_operation,\n    update_file_metadata,\n    handle_error_with_dravid\n)\n\nclass TestDynamicCommandHandler(unittest.TestCase):\n\n    def setUp(self):\n        self.executor = MagicMock()\n        self.metadata_manager = MagicMock()\n\n    @patch('drd.cli.query.dynamic_command_handler.handle_shell_command') as mock_handle_shell_command,\n    @patch('drd.cli.query.dynamic_command_handler.handle_file_operation') as mock_handle_file_operation,\n    @patch('drd.cli.query.dynamic_command_handler.handle_metadata_operation') as mock_handle_metadata_operation,\n    @patch('drd.cli.query.dynamic_command_handler.print_debug') as mock_print_debug,\n    @patch('drd.cli.query.dynamic_command_handler.print_info') as mock_print_info,\n    @patch('drd.cli.query.dynamic_command_handler.print_success') as mock_print_success:\n\n        commands = [\n            {'type': 'explanation', 'content': 'Test explanation'},\n            {'type': 'shell', 'command': 'echo "Hello"'},\n            {'type': 'file', 'operation': 'CREATE', 'filename': 'test.txt', 'content': 'Test content'}\n        ]\n\n        with patch('drd.cli.query.dynamic_command_handler.execute_commands') as mock_execute_commands:\n            success, steps_completed, error, output = mock_execute_commands(commands, self.executor, self.metadata_manager, debug=True)\n\n        self.assertTrue(success)\n        self.assertEqual(steps_completed, 3)\n        self.assertIsNone(error)\n        self.assertIn('Explanation - Test explanation', output)\n        self.assertIn('Shell command - echo "Hello"', output)\n        self.assertIn('File command - CREATE - test.txt', output)\n        mock_print_debug.assert_called_once_with('Completed step 3/3')\n        mock_print_info.assert_called_once_with('Step 2/3: Skipping this step...')\")\n        mock_print_success.assert_called_once_with('Successfully executed: echo "Hello"')\")\n\n    def test_handle_shell_command(self):\n        cmd = {'command': 'echo "Hello"'}\n        self.executor.execute_shell_command.return_value = 'Hello'\n        output = handle_shell_command(cmd, self.executor)\n        self.assertEqual(output, 'Hello')\n        self.executor.execute_shell_command.assert_called_once_with('echo "Hello"')\n        mock_print_success.assert_called_once_with('Successfully executed: echo "Hello"')\n        mock_echo.assert_called_once_with('Command output:\nHello')\n\n    # Add other test methods similarly, ensuring proper patching and assertions as per the gold code.