import unittest\\\\\nfrom unittest.mock import patch, MagicMock, call, mock_open\\\\\nimport xml.etree.ElementTree as ET\\\\\nfrom drd.cli.query.dynamic_command_handler import (\\\\\n    execute_commands,\\\\\n    handle_shell_command,\\\\\n    handle_file_operation,\\\\\n    handle_metadata_operation,\\\\\n    update_file_metadata,\\\\\n    handle_error_with_dravid\\\\\n)\\\\\\\n\\\\nclass TestDynamicCommandHandler(unittest.TestCase):\\\\\n\\\\n    def setUp(self):\\\\\n        self.executor = MagicMock()\\\\\n        self.metadata_manager = MagicMock()\\\\\n\\\\n    def test_execute_commands(self):\\\\\n        commands = [\\\\\n            {'type': 'explanation', 'content': 'Test explanation'},\\\\\n            {'type': 'shell', 'command': 'echo "Hello"'},\\\\\n            {'type': 'file', 'operation': 'CREATE', 'filename': 'test.txt', 'content': 'Test content'},\\\\\n        ]\\\\\n\\\\n        with patch('drd.cli.query.dynamic_command_handler.handle_shell_command', return_value="Shell output") as mock_shell,\\\\\n                patch('drd.cli.query.dynamic_command_handler.handle_file_operation', return_value="File operation success") as mock_file,\\\\\n                patch('drd.cli.query.dynamic_command_handler.handle_metadata_operation', return_value="Metadata operation success") as mock_metadata:\\\\\n\\\\n            success, steps_completed, error, output = execute_commands(commands, self.executor, self.metadata_manager, debug=True)\\\\\n\\\\n        self.assertTrue(success)\\\\\n        self.assertEqual(steps_completed, 3)\\\\\n        self.assertIsNone(error)\\\\\n        self.assertIn("Explanation - Test explanation", output)\\\\\n        self.assertIn("Shell command - echo \"Hello\"", output)\\\\\n        self.assertIn("File command - CREATE - test.txt", output)\\\\\n        self.assertEqual(mock_print_debug.call_count, 1)\\\\\n\\\\n    def test_handle_shell_command(self):\\\\\n        cmd = {'command': 'echo "Hello"'}\\\\\n        self.executor.execute_shell_command.return_value = "Hello"\\\\\n\\\\n        output = handle_shell_command(cmd, self.executor)\\\\\n\\\\n        self.assertEqual(output, "Hello")\\\\\n        self.executor.execute_shell_command.assert_called_once_with('echo "Hello"')\\\\\n        self.assertEqual(mock_print_success.call_count, 1)\\\\\n        self.assertEqual(mock_echo.call_count, 1)\\\\\n\\\\n    def test_handle_file_operation(self):\\\\\n        cmd = {'operation': 'CREATE', 'filename': 'test.txt', 'content': 'Test content'}\\\\\n        self.executor.perform_file_operation.return_value = True\\\\\n\\\\n        output = handle_file_operation(cmd, self.executor, self.metadata_manager)\\\\\n\\\\n        self.assertEqual(output, "Success")\\\\\n        self.executor.perform_file_operation.assert_called_once_with('CREATE', 'test.txt', 'Test content', force=True)\\\\\n\\\\n    def test_update_file_metadata(self):\\\\\n        cmd = {'filename': 'test.txt', 'content': 'Test content'}\\\\\n        mock_generate_description.return_value = ('python', 'Test file', ['test_function'])\\\\\n\\\\n        update_file_metadata(cmd, self.metadata_manager, self.executor)\\\\\n\\\\n        self.metadata_manager.get_project_context.assert_called_once()\\\\\n        self.executor.get_folder_structure.assert_called_once()\\\\\n        self.metadata_manager.update_file_metadata.assert_called_once_with('test.txt', 'python', 'Test content', 'Test file', ['test_function'])\\\\\n\\\\n    def test_handle_error_with_dravid(self):\\\\\n        error = Exception("Test error")\\\\\n        cmd = {'type': 'shell', 'command': 'echo "Hello"'}\\\\\n\\\\n        mock_call_api.return_value = [{'type': 'shell', 'command': "echo 'Fixed'"}]\\\\\n        mock_execute_commands.return_value = (True, 1, None, "Fix applied")\\\\\n\\\\n        result = handle_error_with_dravid(error, cmd, self.executor, self.metadata_manager)\\\\\n\\\\n        self.assertTrue(result)\\\\\n        mock_call_api.assert_called_once()\\\\\n        mock_execute_commands.assert_called_once()\\\\\n        self.assertEqual(mock_print_success.call_count, 1)\\\\\n