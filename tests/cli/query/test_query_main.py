import unittest\\\nfrom unittest.mock import patch, MagicMock, call\\nimport requests\\\\\nfrom drd.cli.query.main import execute_dravid_command\\\\n\\nclass TestExecuteDravidCommand(unittest.TestCase):\\\\\n    def setUp(self):\\\\\n        self.executor = MagicMock()\\\\\n        self.metadata_manager = MagicMock()\\\\\n        self.query = "Test query"\\\\\n        self.image_path = None\\\\\n        self.debug = False\\\\\n        self.instruction_prompt = None\\\\\n\\\\n    @patch('drd.cli.query.main.Executor')\\\\\n    @patch('drd.cli.query.main.ProjectMetadataManager')\\\\\n    @patch('drd.cli.query.main.stream_dravid_api')\\\\\n    @patch('drd.cli.query.main.execute_commands')\\\\\n    @patch('drd.cli.query.main.print_debug')\\\\\n    @patch('drd.cli.query.main.print_error')\\\\\n    @patch('drd.cli.query.main.get_files_to_modify')\\\\\n    @patch('drd.cli.query.main.run_with_loader')\\\\\n    def test_execute_dravid_command_debug_mode(self, mock_run_with_loader, mock_get_files, mock_print_error,\\\\n                                               mock_print_debug, mock_execute_commands, mock_stream_api, mock_metadata_manager, mock_executor):\\\\n        self.debug = True\\\\n        mock_executor.return_value = self.executor\\\\n        mock_metadata_manager.return_value = self.metadata_manager\\\\n        self.metadata_manager.get_project_context.return_value = "Test project context"\\\\n        mock_get_files.return_value = ["file1.py", "file2.py"]\\\\n\\\\n        mock_stream_api.return_value = """\\\\n        <response>\\\\n            <steps>\\\\n                <step>\\\\n                    <type>shell</type>\\\\n                    <command> echo \"hello\" </command>\\\\n                </step>\\\\n                <step>\\\\n                    <type>file</type>\\\\n                    <operation>CREATE</operation>\\\\n                    <filename>text.txt</filename>\\\\n                    <content>Test content</content>\\\\n                </step>\\\\n            </steps>\\\\n        </response>\"""\\\\n        mock_execute_commands.return_value = (True, 2, None, "All commands executed successfully")\\\\n        mock_run_with_loader.side_effect = lambda f, *args, **kwargs: f()\\\\n\\\\n        execute_dravid_command(self.query, self.image_path, self.debug, self.instruction_prompt)\\\\n\\\\n        mock_print_debug.assert_has_calls([call("Received 2 new command(s)")])}\\\\n\\\\nif __name__ == '__main__':\\\\n    unittest.main()\\"