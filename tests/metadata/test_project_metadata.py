from src.drd.metadata.project_metadata import ProjectMetadataManager\nimport unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nimport os\nimport sys\nimport json\nfrom datetime import datetime\n\n# Add the project root to the Python path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))\n\n\nclass TestProjectMetadataManager(unittest.TestCase):\n\n    def setUp(self):\n        self.project_dir = '/fake/project/dir'\n        self.manager = ProjectMetadataManager(self.project_dir)\n\n    @patch('os.path.exists') \n    @patch('builtins.open', new_callable=mock_open, read_data='{\"project_name\": \"Test Project\"}') \n    def test_load_metadata(self, mock_file, mock_exists):\n        mock_exists.return_value = True\n        metadata = self.manager.load_metadata()\n        self.assertEqual(metadata['project_name'], 'Test Project')\n        mock_file.assert_called_once_with(os.path.join(self.project_dir, 'drd.json'), 'r')\n\n    @patch('json.dump') \n    @patch('builtins.open', new_callable=mock_open) \n    def test_save_metadata(self, mock_file, mock_json_dump):\n        self.manager.save_metadata()\n        mock_file.assert_called_once_with(os.path.join(self.project_dir, 'drd.json'), 'w')\n        mock_json_dump.assert_called_once()\n\n    @patch.object(ProjectMetadataManager, 'save_metadata') \n    def test_update_file_metadata(self, mock_save):\n        self.manager.update_file_metadata('test.py', 'python', 'print(\"Hello\")', 'A test Python file')\n        mock_save.assert_called_once()\n        file_entry = next((f for f in self.manager.metadata['files'] if f['filename'] == 'test.py'), None)\n        self.assertIsNotNone(file_entry)\n        self.assertEqual(file_entry['type'], 'python')\n        self.assertEqual(file_entry['content_preview'], 'print(\"Hello\")')\n        self.assertEqual(file_entry['description'], 'A test Python file')\n\n    def test_get_project_context(self):\n        self.manager.metadata = {\n            'project_name': 'Test Project',\n            'last_updated': '',\n            'files': [\n                {'filename': 'main.py', 'type': 'python', 'description': 'Main file'},\n                {'filename': 'utils.py', 'type': 'python', 'description': 'Utility functions'}\n            ],\n            'dev_server': {\n                'start_command': '',\n                'framework': '',\n                'language': ''\n            }\n        }\n        context = self.manager.get_project_context()\n        self.assertIn('Test Project', context)\n        self.assertIn('main.py', context)\n        self.assertIn('utils.py', context)\n\n    @patch.object(ProjectMetadataManager, 'save_metadata') \n    def test_update_dev_server_info(self, mock_save):\n        self.manager.update_dev_server_info('npm start', 'react', 'javascript')\n        mock_save.assert_called_once()\n        self.assertEqual(self.manager.metadata['dev_server']['start_command'], 'npm start')\n        self.assertEqual(self.manager.metadata['dev_server']['framework'], 'react')\n        self.assertEqual(self.manager.metadata['dev_server']['language'], 'javascript')\n\n    def test_get_dev_server_info(self):\n        self.manager.metadata['dev_server'] = {\n            'start_command': 'npm start',\n            'framework': 'react',\n            'language': 'javascript'\n        }\n        info = self.manager.get_dev_server_info()\n        self.assertEqual(info, self.manager.metadata['dev_server'])\n\n    @patch('os.path.exists') \n    @patch('builtins.open', new_callable=mock_open, read_data='print(\"Hello, World!\")') \n    @patch.object(ProjectMetadataManager, 'update_file_metadata') \n    def test_update_metadata_from_file(self, mock_update, mock_file, mock_exists):\n        mock_exists.return_value = True\n        result = self.manager.update_metadata_from_file('test.py')\n        self.assertTrue(result)\n        mock_update.assert_called_once_with('test.py', 'py', 'print(\"Hello, World!\")')\n\n    @patch('os.path.exists') \n    @patch('builtins.open', new_callable=mock_open) \n    @patch.object(ProjectMetadataManager, 'save_metadata') \n    def test_update_metadata_from_file(self, mock_save, mock_file, mock_exists):\n        mock_exists.return_value = True\n        initial_metadata = {\n            'project_name': 'old_project',\n            'last_updated': '',\n            'files': [],\n            'dev_server': {\n                'start_command': '',\n                'framework': '',\n                'language': ''\n            }\n        }\n        self.manager.metadata = initial_metadata\n        new_metadata = {\n            'project_name': 'pyserv',\n            'last_updated': '2023-07-18T10:00:00',\n            'files': [\n                {\n                    'filename': 'app.py',\n                    'content': 'from flask import Flask\n\napp = Flask(__name__)',\n                    'description': 'Main application file',\n                    'exports': 'app'\n                },\n                {\n                    'filename': 'requirements.txt',\n                    'content': 'Flask==2.3.2\nuvicorn==0.22.0',\n                    'description': 'Project dependencies'\n                }\n            ],\n            'dev_server': {\n                'start_command': 'uvicorn app:app --reload',\n                'framework': 'flask',\n                'language': 'python'\n            }\n        }\n        mock_file.return_value.__enter__.return_value.read.return_value = json.dumps(new_metadata)\n        result = self.manager.update_metadata_from_file()\n        self.assertTrue(result)\n        self.assertEqual(self.manager.metadata['project_name'], 'pyserv')\n        self.assertEqual(len(self.manager.metadata['files']), 2)\n        self.assertEqual(self.manager.metadata['dev_server']['start_command'], 'uvicorn app:app --reload')\n        self.assertEqual(self.manager.metadata['dev_server']['framework'], 'flask')\n        self.assertEqual(self.manager.metadata['dev_server']['language'], 'python')\n        app_py = next(f for f in self.manager.metadata['files'] if f['filename'] == 'app.py')\n        self.assertEqual(app_py['description'], 'Main application file')\n        self.assertEqual(app_py['exports'], 'app')\n        self.assertTrue(app_py['content_preview'].startswith('from flask import Flask'))\n        requirements_txt = next(f for f in self.manager.metadata['files'] if f['filename'] == 'requirements.txt')\n        self.assertEqual(requirements_txt['description'], 'Project dependencies')\n        self.assertTrue(requirements_txt['content_preview'].startswith('Flask==2.3.2'))\n