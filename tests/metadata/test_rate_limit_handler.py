import unittest\\nfrom unittest.mock import patch, MagicMock, patch\\nimport asyncio\\nimport time\\nimport logging\\nimport xml.etree.ElementTree as ET\\n\\nlogging.basicConfig(level=logging.DEBUG)\\nlogger = logging.getLogger(__name__)\\n\\nclass TestRateLimitHandler(unittest.IsolatedAsyncioTestCase):\\n\\n    async def test_rate_limiter(self):\\n        limiter = RateLimiter(3, 1)  # 3 calls per 1 second\\n        start_time = time.time()\\n\\n        acquire_times = []\\n        for i in range(5):\\n            await limiter.acquire()\\n            current_time = time.time()\\n            acquire_times.append(current_time - start_time)\\n            logger.debug(\\"Acquire {i+1} at {current_time - start_time:.4f} seconds\\")\\n\\n        end_time = time.time()\\n        total_time = end_time - start_time\\n\\n        logger.debug(f\\"Total time: {total_time:.4f} seconds\\")\\n        logger.debug(f\\"Acquire times: {acquire_times}\\")\\n\\n        # Check that the first 3 calls were almost instantaneous\\n        self.assertLess(acquire_times[2] - acquire_times[0], 0.1)\\n\\n    @patch('drd.metadata.rate_limit_handler.call_dravid_api_with_pagination')\\n    @patch('drd.metadata.rate_limit_handler.extract_and_parse_xml')\\n    async def test_process_single_file(self, mock_extract_xml, mock_call_api):\\n        mock_call_api.return_value = "\\u003cresponse\\u003e\\u003ctype\\u003epython\\u003c/type\\u003e\\u003csummary\\u003eA test file\\u003c/summary\\u003e\\u003cexports\\u003etest_function\\u003c/exports\\u003e\\u003c/response\\u003e"\\n        mock_root = ET.fromstring(mock_call_api.return_value)\\n        mock_extract_xml.return_value = mock_root\\n\\n        result = await process_single_file("test.py", "print('Hello')", "Test project", {"test.py": "file"})\\n\\n        self.assertEqual(result, ("test.py", "python", \"A test file\", "test_function"))\\n        mock_call_api.assert_called_once()\\n        mock_extract_xml.assert_called_once_with(mock_call_api.return_value)\\n\\n    @patch('drd.metadata.rate_limit_handler.call_dravid_api_with_pagination')\\n    @patch('drd.metadata.rate_limit_handler.extract_and_parse_xml')\\n    async def test_process_single_file_error(self, mock_extract_xml, mock_call_api):\\n        mock_call_api.side_effect = Exception("API Error")\\n\\n        result = await process_single_file("test.py", "print('Hello')", "Test project", {"test.py": "file"})\\n\\n        self.assertEqual(result[0], "test.py")\\n        self.assertEqual(result[1], "unknown")\\n        self.assertTrue(result[2].startswith("Error:"))\\n        self.assertEqual(result[3], "")\\n