import unittest\\\nfrom unittest.mock import patch, MagicMock, mock_open\\\\\nimport xml.etree.ElementTree as ET\\\\nfrom drd.metadata.updater import update_metadata_with_dravid\\\\nimport asyncio\\\\n\\nclass TestMetadataUpdater(unittest.TestCase):\\n\\n    def setUp(self):\\n        self.current_dir = '/fake/project/dir'\\n        self.meta_description = 'Update project metadata'\\n        self.project_context = 'This is a sample project context'\\n        self.folder_structure = {\"src": {\"main.py": 'file',\"utils.py": 'file'}\",\"tests": {\"test_main.py": 'file'}\",\"README.md": 'file',\"package.json": 'file'}\\\\\n\\n    @patch('drd.metadata.updater.ProjectMetadataManager') \\n    @patch('drd.metadata.updater.get_ignore_patterns') \\n    @patch('drd.metadata.updater.get_folder_structure') \\n    @patch('drd.metadata.updater.call_dravid_api_with_pagination') \\n    @patch('drd.metadata.updater.extract_and_parse_xml') \\n    @patch('drd.metadata.updater.find_file_with_dravid') \\n    @patch('drd.metadata.updater.print_info') \\n    @patch('drd.metadata.updater.print_success') \\n    @patch('drd.metadata.updater.print_warning') \\n    @patch('drd.metadata.updater.print_error') \\n    async def test_update_metadata_with_dravid(self, mock_print_error, mock_print_warning, \\n                                         mock_print_success, mock_print_info, \\n                                         mock_find_file, mock_extract_xml, mock_call_api, \\n                                         mock_get_folder_structure, mock_get_ignore_patterns, \\n                                         mock_metadata_manager): \\n        # Set up mocks \\n        mock_metadata_manager.return_value.get_project_context.return_value = self.project_context \\n        mock_get_ignore_patterns.return_value = ( \\n            [], 'No ignore patterns found') \\n        mock_get_folder_structure.return_value = self.folder_structure \\n\\n        mock_call_api.return_value = ''' \\n        <response> \\n            <files> \\n                <file> \\n                    <path>src/main.py</path> \\n                    <action>update</action> \\n                    <metadata> \\n                        <type>python</type> \\n                        <summary>Main Python file</summary> \\n                        <exports>main_function</exports> \\n                        <imports>os</imports> \\n                        <external_dependencies> \\n                            <dependency>requests==2.26.0</dependency> \\n                        </external_dependencies> \\n                    </metadata> \\n                </file> \\n                <file> \\n                    <path>README.md</path> \\n                    <action>remove</action> \\n                </file> \\n                <file> \\n                    <path>package.json</path> \\n                    <action>update</action> \\n                    <metadata> \\n                        <type>json</type> \\n                        <summary>Package configuration file</summary> \\n                        <exports>None</exports> \\n                        <imports>None</imports> \\n                        <external_dependencies> \\n                            <dependency>react@^17.0.2</dependency> \\n                            <dependency>jest@^27.0.6</dependency> \\n                        </external_dependencies> \\n                    </metadata> \\n                </file> \\n            </files> \\n        </response> ''' \\n        mock_root = ET.fromstring(mock_call_api.return_value) \\n        mock_extract_xml.return_value = mock_root \\n\\n        mock_find_file.side_effect = [ \\n            '/fake/project/dir/src/main.py', '/fake/project/dir/package.json'] \\n\\n        # Mock file contents \\n        mock_file_contents = { \\n            '/fake/project/dir/src/main.py': "print('Hello, World!')", \\n            '/fake/project/dir/package.json': '{"name": "test-project"}' \\n        } \\n\\n        def mock_open_file(filename, *args, **kwargs): \\n            return mock_open(read_data=mock_file_contents.get(filename, 